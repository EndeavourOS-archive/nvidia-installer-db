#!/bin/bash
#
# Updates NVIDIA database for nvidia-installer and nvidia-installer-dkms.
#
# https://www.nvidia.com/en-us/drivers/unix/
# https://download.nvidia.com/XFree86/Linux-x86_64/435.21/README/supportedchips.html
# https://download.nvidia.com/XFree86/Linux-x86_64/435.21/README/index.html

GetNvidiaBranch() {
    local string="$1"
    local data="$(wget -q --timeout=10 -O- https://www.nvidia.com/en-us/drivers/unix)"
    test -n "$data" || DIE "$FUNCNAME: fetching branch '$string' failed."
    echo "$data" | grep "$string" | head -n 1 | sed 's|^.*">\([0-9\.]*\)<.*$|\1|'
}

GetNvidiaIds() {
    local branch="$1"
    local ids="$(wget -q --timeout=10 -O- https://download.nvidia.com/XFree86/Linux-x86_64/$branch/README/supportedchips.html)"
    test -n "$ids" || DIE "$FUNCNAME: fetching ids from branch '$branch' failed."
    ids="$(echo "$ids" | sed -n '1,/.*NVIDIA Tesla GPUs.*/p' | grep "</td>" | grep "<td>")"
    ids="$(echo "$ids" | grep -P "<td>[0-9A-F][0-9A-F][0-9A-F ]*</td>" | sed -e 's|<td>||' -e 's|</td>||')"
    ids="$(echo "$ids" | tr '[:upper:]' '[:lower:]')"
    echo "$ids"
}

NvidiaIdsCommon() {
    local string="$1"
    local branch="$(GetNvidiaBranch "$string")"
    test -n "$branch" || DIE "$FUNCNAME: GetNvidiaBranch failed."
    local ids="$(GetNvidiaIds "$branch")"
    test -n "$ids" || DIE "$FUNCNAME: GetNvidiaIds failed."
    echo "$ids"
}

NvidiaIdsLatest() {
    local ids="$(NvidiaIdsCommon "Latest Short Lived Branch")"
    test -n "$ids" || DIE "$FUNCNAME: NvidiaIdsCommon failed."
    echo "$ids"
}

NvidiaIdsLegacy() {
    local ids="$(NvidiaIdsCommon "Latest Legacy GPU version")"
    test -n "$ids" || DIE "$FUNCNAME: NvidiaIdsCommon failed."
    echo "$ids"
}

echo2()   { echo "$@" >&2 ; }
DIE()     { echo2 "Error: $1" ; exit 1 ; }

CreateNvidiaDb()
{
    local PROGNAME=nvidia-installer-update-db

    local targetdir=/var/lib/pci                        # db directory
    local target_latest=$targetdir/nvidia.ids           # db (list of ids) for driver type 'nvidia'
    local target_legacy=$targetdir/nvidia-390xx.ids     # db (list of ids) for driver type 'nvidia-390xx'

    local bakdir=$targetdir/ORIG.BAK                    # original db is stored into this directory, if it exists
    local nvidia_ids_latest
    local nvidia_ids_legacy
    local tmpfile1
    local tmpfile2
    local sudo_commands=":"                             # collect required root commands here
    local readme="NVIDIA db generated by $PROGNAME at $(date +%Y-%m-%d)."
    local xx

    echo2 "Fetching NVIDIA graphics card ids from nvidia.com ..."

    nvidia_ids_latest="$(NvidiaIdsLatest)"
    test -n "$nvidia_ids_latest" || DIE "cannot fetch latest NVIDIA ids"

    nvidia_ids_legacy="$(NvidiaIdsLegacy)"
    test -n "$nvidia_ids_legacy" || DIE "cannot fetch legacy NVIDIA ids"

    # Data is fetched from nvidia.com.
    # Now save the data into the local database.

    tmpfile1=$(mktemp)
    tmpfile2=$(mktemp)

    for xx in $nvidia_ids_latest ; do
        echo "$xx" >> $tmpfile1
    done
    for xx in $nvidia_ids_legacy ; do
        echo "$xx" >> $tmpfile2
    done

    sudo_commands+=" ; mkdir -p $targetdir"
    sudo_commands+=" ; if [ ! -d $bakdir ] ; then mkdir -p $bakdir ; cp -a $targetdir/*.ids $bakdir >& /dev/null ; fi"
    sudo_commands+=" ; mv $tmpfile1 $target_latest ; mv $tmpfile2 $target_legacy"
    sudo_commands+=" ; chown root:root $target_latest $target_legacy"
    sudo_commands+=" ; chmod 0644 $target_latest $target_legacy"
    sudo_commands+=" ; echo $readme > $targetdir/README.txt"

    echo2 "Adding NVIDIA graphics card ids to the local database: "
    # Now we need elevated privileges.
    sudo bash -c "$sudo_commands"
}

CreateNvidiaDb "$@"    # program starts here
